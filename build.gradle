plugins {
    id 'java-library'
    id 'idea'
    id 'checkstyle'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.github.mgljava'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.2.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.2.0"
    testImplementation 'org.mockito:mockito-junit-jupiter:2.21.0'
}

/*check style*/
checkstyle {
    toolVersion '8.1'
    ignoreFailures = false
    configFile file("$project.rootDir/config/checkstyle/checkstyle.xml")
    sourceSets = [sourceSets.main]

    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleMain.exclude '**/Application.java'
}

/*测试*/
test {
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    useJUnitPlatform()
}

/*jacoco 测试覆盖率*/
jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/Application.class'
                    ]
            )
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    '**.Application'
            ]

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
    }
    dependsOn(jacocoTestReport)
}
check.dependsOn jacocoTestCoverageVerification
